type User {
  id: ID!,
  email: String!
  admin: Boolean
}

type MangaSeries {
  id: ID!
  author: String!
  title: String!
  chapters: [MangaChapter]
}

type MangaChapter {
  id: ID!,
  series: MangaSeries!
  chapterNumber: Int!
  pages: [MangaPage]
}

type MangaPage {
  id: ID!
  chapter: MangaChapter!
  picture: String!
}

input RegisterUserInput {
  email: String!,
  password: String!
}

type UserAndToken {
  user: User!,
  token: String!
}

input LoginUserInput {
  email: String!,
  password: String!
}

input CreateMangaChapterInput {
  mangaSeriesId: Int
  mangaSeriesAuthor: String
  mangaSeriesTitle: String
  chapterNumber: Int!
  pictures: [String!]!
}

type Mutation {
  registerUser(input: RegisterUserInput!): UserAndToken!
  loginUser(input: LoginUserInput!): UserAndToken!
  createMangaChapter(input: CreateMangaChapterInput!): MangaChapter!
}

type Query {
  mangaSeries: [MangaSeries]!
  mangaChapters: [MangaChapter]!
}
